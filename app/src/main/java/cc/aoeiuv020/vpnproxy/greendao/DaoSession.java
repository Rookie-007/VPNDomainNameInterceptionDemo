package cc.aoeiuv020.vpnproxy.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import cc.aoeiuv020.vpnproxy.greendao.bean.BlacklistOfWebsitesBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.BlacklistOrAutomaticInterceptionNumberBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.BlockingMaliciousWebSitesBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.EducationalConsultingDetals;
import cc.aoeiuv020.vpnproxy.greendao.bean.EducationalConsultingList;
import cc.aoeiuv020.vpnproxy.greendao.bean.InterceptMaliciousStatusBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.KeywordAddressWebsitesBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.VisualProtectionBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.VpnProtectStatusBean;
import cc.aoeiuv020.vpnproxy.greendao.bean.WhiteListOfWebsitesBean;

import cc.aoeiuv020.vpnproxy.greendao.BlacklistOfWebsitesBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.BlacklistOrAutomaticInterceptionNumberBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.BlockingMaliciousWebSitesBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.EducationalConsultingDetalsDao;
import cc.aoeiuv020.vpnproxy.greendao.EducationalConsultingListDao;
import cc.aoeiuv020.vpnproxy.greendao.InterceptMaliciousStatusBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.KeywordAddressWebsitesBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.VisualProtectionBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.VpnProtectStatusBeanDao;
import cc.aoeiuv020.vpnproxy.greendao.WhiteListOfWebsitesBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig blacklistOfWebsitesBeanDaoConfig;
    private final DaoConfig blacklistOrAutomaticInterceptionNumberBeanDaoConfig;
    private final DaoConfig blockingMaliciousWebSitesBeanDaoConfig;
    private final DaoConfig educationalConsultingDetalsDaoConfig;
    private final DaoConfig educationalConsultingListDaoConfig;
    private final DaoConfig interceptMaliciousStatusBeanDaoConfig;
    private final DaoConfig keywordAddressWebsitesBeanDaoConfig;
    private final DaoConfig visualProtectionBeanDaoConfig;
    private final DaoConfig vpnProtectStatusBeanDaoConfig;
    private final DaoConfig whiteListOfWebsitesBeanDaoConfig;

    private final BlacklistOfWebsitesBeanDao blacklistOfWebsitesBeanDao;
    private final BlacklistOrAutomaticInterceptionNumberBeanDao blacklistOrAutomaticInterceptionNumberBeanDao;
    private final BlockingMaliciousWebSitesBeanDao blockingMaliciousWebSitesBeanDao;
    private final EducationalConsultingDetalsDao educationalConsultingDetalsDao;
    private final EducationalConsultingListDao educationalConsultingListDao;
    private final InterceptMaliciousStatusBeanDao interceptMaliciousStatusBeanDao;
    private final KeywordAddressWebsitesBeanDao keywordAddressWebsitesBeanDao;
    private final VisualProtectionBeanDao visualProtectionBeanDao;
    private final VpnProtectStatusBeanDao vpnProtectStatusBeanDao;
    private final WhiteListOfWebsitesBeanDao whiteListOfWebsitesBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        blacklistOfWebsitesBeanDaoConfig = daoConfigMap.get(BlacklistOfWebsitesBeanDao.class).clone();
        blacklistOfWebsitesBeanDaoConfig.initIdentityScope(type);

        blacklistOrAutomaticInterceptionNumberBeanDaoConfig = daoConfigMap.get(BlacklistOrAutomaticInterceptionNumberBeanDao.class).clone();
        blacklistOrAutomaticInterceptionNumberBeanDaoConfig.initIdentityScope(type);

        blockingMaliciousWebSitesBeanDaoConfig = daoConfigMap.get(BlockingMaliciousWebSitesBeanDao.class).clone();
        blockingMaliciousWebSitesBeanDaoConfig.initIdentityScope(type);

        educationalConsultingDetalsDaoConfig = daoConfigMap.get(EducationalConsultingDetalsDao.class).clone();
        educationalConsultingDetalsDaoConfig.initIdentityScope(type);

        educationalConsultingListDaoConfig = daoConfigMap.get(EducationalConsultingListDao.class).clone();
        educationalConsultingListDaoConfig.initIdentityScope(type);

        interceptMaliciousStatusBeanDaoConfig = daoConfigMap.get(InterceptMaliciousStatusBeanDao.class).clone();
        interceptMaliciousStatusBeanDaoConfig.initIdentityScope(type);

        keywordAddressWebsitesBeanDaoConfig = daoConfigMap.get(KeywordAddressWebsitesBeanDao.class).clone();
        keywordAddressWebsitesBeanDaoConfig.initIdentityScope(type);

        visualProtectionBeanDaoConfig = daoConfigMap.get(VisualProtectionBeanDao.class).clone();
        visualProtectionBeanDaoConfig.initIdentityScope(type);

        vpnProtectStatusBeanDaoConfig = daoConfigMap.get(VpnProtectStatusBeanDao.class).clone();
        vpnProtectStatusBeanDaoConfig.initIdentityScope(type);

        whiteListOfWebsitesBeanDaoConfig = daoConfigMap.get(WhiteListOfWebsitesBeanDao.class).clone();
        whiteListOfWebsitesBeanDaoConfig.initIdentityScope(type);

        blacklistOfWebsitesBeanDao = new BlacklistOfWebsitesBeanDao(blacklistOfWebsitesBeanDaoConfig, this);
        blacklistOrAutomaticInterceptionNumberBeanDao = new BlacklistOrAutomaticInterceptionNumberBeanDao(blacklistOrAutomaticInterceptionNumberBeanDaoConfig, this);
        blockingMaliciousWebSitesBeanDao = new BlockingMaliciousWebSitesBeanDao(blockingMaliciousWebSitesBeanDaoConfig, this);
        educationalConsultingDetalsDao = new EducationalConsultingDetalsDao(educationalConsultingDetalsDaoConfig, this);
        educationalConsultingListDao = new EducationalConsultingListDao(educationalConsultingListDaoConfig, this);
        interceptMaliciousStatusBeanDao = new InterceptMaliciousStatusBeanDao(interceptMaliciousStatusBeanDaoConfig, this);
        keywordAddressWebsitesBeanDao = new KeywordAddressWebsitesBeanDao(keywordAddressWebsitesBeanDaoConfig, this);
        visualProtectionBeanDao = new VisualProtectionBeanDao(visualProtectionBeanDaoConfig, this);
        vpnProtectStatusBeanDao = new VpnProtectStatusBeanDao(vpnProtectStatusBeanDaoConfig, this);
        whiteListOfWebsitesBeanDao = new WhiteListOfWebsitesBeanDao(whiteListOfWebsitesBeanDaoConfig, this);

        registerDao(BlacklistOfWebsitesBean.class, blacklistOfWebsitesBeanDao);
        registerDao(BlacklistOrAutomaticInterceptionNumberBean.class, blacklistOrAutomaticInterceptionNumberBeanDao);
        registerDao(BlockingMaliciousWebSitesBean.class, blockingMaliciousWebSitesBeanDao);
        registerDao(EducationalConsultingDetals.class, educationalConsultingDetalsDao);
        registerDao(EducationalConsultingList.class, educationalConsultingListDao);
        registerDao(InterceptMaliciousStatusBean.class, interceptMaliciousStatusBeanDao);
        registerDao(KeywordAddressWebsitesBean.class, keywordAddressWebsitesBeanDao);
        registerDao(VisualProtectionBean.class, visualProtectionBeanDao);
        registerDao(VpnProtectStatusBean.class, vpnProtectStatusBeanDao);
        registerDao(WhiteListOfWebsitesBean.class, whiteListOfWebsitesBeanDao);
    }
    
    public void clear() {
        blacklistOfWebsitesBeanDaoConfig.clearIdentityScope();
        blacklistOrAutomaticInterceptionNumberBeanDaoConfig.clearIdentityScope();
        blockingMaliciousWebSitesBeanDaoConfig.clearIdentityScope();
        educationalConsultingDetalsDaoConfig.clearIdentityScope();
        educationalConsultingListDaoConfig.clearIdentityScope();
        interceptMaliciousStatusBeanDaoConfig.clearIdentityScope();
        keywordAddressWebsitesBeanDaoConfig.clearIdentityScope();
        visualProtectionBeanDaoConfig.clearIdentityScope();
        vpnProtectStatusBeanDaoConfig.clearIdentityScope();
        whiteListOfWebsitesBeanDaoConfig.clearIdentityScope();
    }

    public BlacklistOfWebsitesBeanDao getBlacklistOfWebsitesBeanDao() {
        return blacklistOfWebsitesBeanDao;
    }

    public BlacklistOrAutomaticInterceptionNumberBeanDao getBlacklistOrAutomaticInterceptionNumberBeanDao() {
        return blacklistOrAutomaticInterceptionNumberBeanDao;
    }

    public BlockingMaliciousWebSitesBeanDao getBlockingMaliciousWebSitesBeanDao() {
        return blockingMaliciousWebSitesBeanDao;
    }

    public EducationalConsultingDetalsDao getEducationalConsultingDetalsDao() {
        return educationalConsultingDetalsDao;
    }

    public EducationalConsultingListDao getEducationalConsultingListDao() {
        return educationalConsultingListDao;
    }

    public InterceptMaliciousStatusBeanDao getInterceptMaliciousStatusBeanDao() {
        return interceptMaliciousStatusBeanDao;
    }

    public KeywordAddressWebsitesBeanDao getKeywordAddressWebsitesBeanDao() {
        return keywordAddressWebsitesBeanDao;
    }

    public VisualProtectionBeanDao getVisualProtectionBeanDao() {
        return visualProtectionBeanDao;
    }

    public VpnProtectStatusBeanDao getVpnProtectStatusBeanDao() {
        return vpnProtectStatusBeanDao;
    }

    public WhiteListOfWebsitesBeanDao getWhiteListOfWebsitesBeanDao() {
        return whiteListOfWebsitesBeanDao;
    }

}
